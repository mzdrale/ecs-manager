### Global variables
variables:
  SERIAL: 2020061501
  GO_VERSION: '1.14'
  GOARCH: 'amd64'

### List of stages
stages:
  - go_build
  - release_go_binary

### Shared content
.shared:
  tags:
    - gitlab-org

### Global cache
# Pass small bits of information between jobs
cache:
  key: ${CI_COMMIT_TAG}
  paths:
    - project_cache/

### Jobs

# Release Job
.ecsmanager_release:
  image: golang:${GO_VERSION}
  extends: .shared
  dependencies: []
  script:
    # Environment variables
    - export BUILD_JOB_ID=$(cat project_cache/${GOOS}-${GOARCH}_job_id.txt)
    # Create a release
    - |
      curl -sSL -X POST \
        -H 'Content-Type: application/json' \
        -H "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
        -d '{
          "name": "'"${CI_COMMIT_TAG}"'",
          "tag_name": "'"${CI_COMMIT_TAG}"'",
          "description": "'"New ${CI_PROJECT_NAME} release"'",
          "assets": {
            "links": [
              {
                "name": "'"${CI_PROJECT_NAME}-${CI_COMMIT_TAG}-${GOOS}-${GOARCH}.tar.gz"'",
                "url": "'"https://gitlab.com/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/-/jobs/${BUILD_JOB_ID}/artifacts/raw/target/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}-${GOOS}-${GOARCH}.tar.gz"'"
              }
            ]
          }
        }' \
      "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases" > /dev/null

# Build Job - Darwin (macOS)
go_build_darwin:
  image: golang:${GO_VERSION}
  stage: go_build
  extends: .shared
  script:
    # Environment variables
    - export REVISION="${CI_COMMIT_TAG}"
    - export GOOS="darwin"
    # Save job id
    - test -d project_cache || mkdir project_cache
    - echo ${CI_JOB_ID} > project_cache/${GOOS}-${GOARCH}_job_id.txt
    # Build Go binary and create an artifact
    - mkdir target
    - make build:${GOOS}
    - tar czvf target/${CI_PROJECT_NAME}-${REVISION}-${GOOS}-${GOARCH}.tar.gz ${CI_PROJECT_NAME}-${GOOS}-${GOARCH}
  artifacts:
    name: ${CI_PROJECT_NAME}
    paths:
      - target/*.tar.gz
  only:
    refs:
      - tags

# Build Job - Linux
go_build_linux:
  image: golang:${GO_VERSION}
  stage: go_build
  extends: .shared
  script:
    # Environment variables
    - export REVISION="${CI_COMMIT_TAG}"
    - export GOOS="linux"
    # Save job id
    - test -d project_cache || mkdir project_cache
    - echo ${CI_JOB_ID} > project_cache/${GOOS}-${GOARCH}_job_id.txt
    # Build Go binary and create an artifact
    - mkdir target
    - make build:${GOOS}
    - tar czvf target/${CI_PROJECT_NAME}-${REVISION}-${GOOS}-${GOARCH}.tar.gz ${CI_PROJECT_NAME}-${GOOS}-${GOARCH}
  artifacts:
    name: ${CI_PROJECT_NAME}
    paths:
      - target/*.tar.gz
  only:
    refs:
      - tags

# Release Linux binary Job
release_linux_go_binary:
  image: golang:${GO_VERSION}
  stage: release_go_binary
  extends: .ecsmanager_release
  dependencies:
    - go_build_linux
  script:
    # Environment variables
    - export GOOS=linux
    - export BUILD_JOB_ID=$(cat project_cache/${GOOS}-${GOARCH}_job_id.txt)
  only:
    refs:
      - tags

# Release Darwin (macOS) binary Job
release_darwin_go_binary:
  image: golang:${GO_VERSION}
  stage: release_go_binary
  extends: .ecsmanager_release
  dependencies:
    - go_build_darwin
  script:
    # Environment variables
    - export GOOS=darwin
    - export BUILD_JOB_ID=$(cat project_cache/${GOOS}-${GOARCH}_job_id.txt)
  only:
    refs:
      - tags
